#include "hep/ps/lusifer_phase_space_generator.hpp"

#include <catch.hpp>

#include <algorithm>
//#include <iomanip>
//#include <iostream>
#include <limits>
#include <random>
#include <vector>

using T = HEP_TYPE_T;

hep::lusifer_constants<T> constants(
    T(125.09), T(4.0e-3),
    T(174.2), T(1.41),
    T(80.385), T(2.085),
    T(91.1876), T(2.4952)
);

std::array<std::array<T, 20>, 8> momenta = {
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.40296386676145545e+02),
        T( 1.80093661773932638e+02), T(-1.06520214827614524e+02), T( 1.18161204595869222e+02),
        T( 5.51415802453198580e+01), T(-4.57698173189434954e-01), T(-1.22485856030060347e+00),
        T( 5.51260746456752884e+01), T( 2.71857612372859251e+02), T(-1.79635963600743196e+02),
        T( 1.07745073387915127e+02), T(-1.73287279241544496e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.40296386676145545e+02),
        T( 1.80093661773932638e+02), T(-1.06520214827614524e+02), T( 1.18161204595869222e+02),
        T( 2.71857612372859251e+02), T(-1.79635963600743196e+02), T( 1.07745073387915127e+02),
        T(-1.73287279241544496e+02), T( 5.51415802453198580e+01), T(-4.57698173189434954e-01),
        T(-1.22485856030060347e+00), T( 5.51260746456752884e+01),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 3.66217106357057389e+01),
        T(-3.71921362830363478e-01), T(-9.90056203964318371e-01), T( 3.66064359518681357e+01),
        T( 2.55338784241501315e+02), T( 1.91393215035518210e+02), T(-1.13203575191462633e+02),
        T( 1.25504910422527729e+02), T( 2.75335084417117514e+02), T(-1.91021293672687847e+02),
        T( 1.14193631395426948e+02), T(-1.62111346374395850e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.75335084417117514e+02),
        T(-1.91021293672687847e+02), T( 1.14193631395426948e+02), T(-1.62111346374395850e+02),
        T( 2.55338784241501315e+02), T( 1.91393215035518210e+02), T(-1.13203575191462633e+02),
        T( 1.25504910422527729e+02), T( 3.66217106357057389e+01), T(-3.71921362830363478e-01),
        T(-9.90056203964318371e-01), T( 3.66064359518681357e+01),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 3.25046571487167455e+01),
        T(-3.50330637585805960e-01), T(-9.30999704369153136e-01), T( 3.24894328105379557e+01),
        T( 2.76177622951995204e+02), T(-1.93502811868910243e+02), T( 1.15589551157005445e+02),
        T(-1.59592596575034122e+02), T( 2.58613299193612704e+02), T( 1.93853142506496056e+02),
        T(-1.14658551452636289e+02), T( 1.27103163764496159e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.76177622951995204e+02),
        T(-1.93502811868910243e+02), T( 1.15589551157005445e+02), T(-1.59592596575034122e+02),
        T( 3.25046571487167455e+01), T(-3.50330637585805960e-01), T(-9.30999704369153136e-01),
        T( 3.24894328105379557e+01), T( 2.58613299193612704e+02), T( 1.93853142506496056e+02),
        T(-1.14658551452636289e+02), T( 1.27103163764496159e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 1.92484610347505509e+02),
        T( 1.36496323264851583e+02), T(-1.18268458743194088e+02), T( 6.65706438478520823e+01),
        T( 9.87455822675626109e+01), T( 7.04684329992198286e+01), T(-4.14523467522008104e+00),
        T( 6.90485843264132342e+01), T( 2.76065386679256505e+02), T(-2.06964756264071411e+02),
        T( 1.22413693418414169e+02), T(-1.35619228174265317e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 9.87455822675626109e+01),
        T(-7.04684329992198002e+01), T( 4.14523467522005262e+00), T(-6.90485843264132342e+01),
        T( 1.92484610347505509e+02), T(-1.36496323264851611e+02), T( 1.18268458743194117e+02),
        T(-6.65706438478520823e+01), T( 2.76065386679256505e+02), T( 2.06964756264071411e+02),
        T(-1.22413693418414169e+02), T( 1.35619228174265317e+02),
    },
};

std::array<std::array<T, 8>, 8> densities = {
    std::array<T, 8>{
        T(2.35959472593700605e-04), T(2.29417169049447917e-08), T(4.11202770205533252e-07),
        T(1.28398953198005041e-07), T(1.55575480288282776e-07), T(4.99641038198129443e-04),
        T(2.14310038458287808e-06), T(8.32381016133645646e-06),
    },
    std::array<T, 8>{
        T(2.29417169049447917e-08), T(2.35959472593700605e-04), T(9.73037759153924766e-08),
        T(3.12497570496823569e-04), T(6.57457204191377282e-07), T(2.05292432121664677e-07),
        T(1.96173246156974226e-05), T(6.69693691861971987e-09),
    },
    std::array<T, 8>{
        T(4.42251966839813544e-07), T(1.48213102076607358e-07), T(2.94669801048848083e-04),
        T(2.87129815665272741e-08), T(4.71419806174224159e-04), T(1.37067238520176097e-07),
        T(1.17574840569837977e-05), T(3.96828676165125263e-05),
    },
    std::array<T, 8>{
        T(6.44481628846228015e-08), T(2.21658660255867840e-04), T(2.87129815665272741e-08),
        T(2.94669801048848083e-04), T(3.15217062905554317e-07), T(9.40573836578872378e-07),
        T(1.77246094392675639e-05), T(8.62862287875215000e-09),
    },
    std::array<T, 8>{
        T(1.67758812258049004e-07), T(4.93121380331404434e-07), T(2.91254685014660515e-04),
        T(8.34630484140013949e-08), T(4.64926991038877699e-04), T(4.53249770049599932e-08),
        T(6.41588191877955757e-07), T(2.43600573739352823e-07),
    },
    std::array<T, 8>{
        T(2.18958220975512058e-04), T(6.27454991736970568e-08), T(2.23150059426707338e-07),
        T(6.55942086405974665e-07), T(4.53249770049599932e-08), T(4.64926991038877699e-04),
        T(6.41588191877955757e-07), T(2.43600573739352823e-07),
    },
    std::array<T, 8>{
        T(3.57160636603093316e-07), T(3.35117192428218358e-08), T(2.45297249841921506e-07),
        T(8.44599889530815378e-08), T(1.36340253424052890e-07), T(5.00321674651929450e-07),
        T(2.38113314115913695e-05), T(6.26805754302275860e-05),
    },
    std::array<T, 8>{
        T(3.51243727874876225e-07), T(6.09400581208241072e-07), T(1.38935695517164833e-07),
        T(1.63062513991234420e-07), T(9.83608964968850610e-08), T(6.65378075143264901e-08),
        T(6.26805754302275860e-05), T(2.38113314115913695e-05),
    },
};

TEST_CASE("WZ + jet production phase space", "")
{
    // minimum energy must be larger than the sum of the masses of W and Z
    T const min_energy = T(200.0);
    T const cmf_energy = T(2000.0);

    auto psg = hep::make_lusifer_phase_space_generator(
        min_energy,
        cmf_energy,
        "dq~uq W+ Z0 gl ",
        constants
    );

    std::mt19937 rng;
    std::vector<T> random_numbers(psg->dimensions());

    std::generate(random_numbers.begin(), random_numbers.end(), [&](){
        return std::generate_canonical<T, std::numeric_limits<T>::digits>(rng);
    });

    std::vector<T> p(psg->map_dimensions());
    std::vector<T> d(psg->channels());

//    // generate the test data
//    std::cout.precision(std::numeric_limits<T>::max_digits10);
//    std::cout.setf(std::ios_base::scientific);
//    std::cout.setf(std::ios_base::right);
//
//    std::cout << "std::array<std::array<T, " << psg->map_dimensions() << ">, " << psg->channels()
//        << "> momenta = {\n";
//
//    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
//    {
//        psg->generate(random_numbers, p, channel);
//
//        std::cout << "    std::array<T, " << psg->map_dimensions() << ">{\n";
//
//        std::size_t i = 0;
//        std::size_t n = 3;
//
//        for (; i != p.size() / n; ++i)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != n; ++j)
//            {
//                std::cout << " T(" << std::setw(std::cout.precision() + 7) << p.at(n * i + j)
//                    << "),";
//            }
//            std::cout << '\n';
//        }
//
//        if ((p.size() % n) != 0)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != (p.size() % n); ++j)
//            {
//                std::cout << " T(" << std::setw(std::cout.precision() + 7) << p.at(n * i + j)
//                    << "),";
//            }
//            std::cout << '\n';
//        }
//
//        std::cout << "    },\n";
//    }
//
//    std::cout << "};\n\nstd::array<std::array<T, " << psg->channels() << ">, " << psg->channels()
//        << "> densities = {\n";
//
//    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
//    {
//        psg->generate(random_numbers, p, channel);
//        psg->densities(d);
//
//        std::cout << "    std::array<T, " << psg->channels() << ">{\n";
//
//        std::size_t i = 0;
//        std::size_t n = 3;
//
//        for (; i != d.size() / n; ++i)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != n; ++j)
//            {
//                std::cout << " T(" << d.at(n * i + j) << "),";
//            }
//            std::cout << '\n';
//        }
//
//        if ((d.size() % n) != 0)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != (d.size() % n); ++j)
//            {
//                std::cout << " T(" << d.at(n * i + j) << "),";
//            }
//            std::cout << '\n';
//        }
//
//        std::cout << "    },\n";
//    }
//
//    std::cout << "};\n";

    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
    {
        CAPTURE( channel );

        psg->generate(random_numbers, p, channel);
        psg->densities(d);

        for (std::size_t j = 0; j != momenta.at(channel).size(); ++j)
        {
            CAPTURE( j );
            CHECK_THAT( p.at(j) , Catch::WithinULP(momenta.at(channel).at(j), 5) );
        }

        for (std::size_t j = 0; j != densities.at(channel).size(); ++j)
        {
            CAPTURE( j );
            CHECK_THAT( d.at(j) , Catch::WithinULP(densities.at(channel).at(j), 5) );
        }
    }
}
