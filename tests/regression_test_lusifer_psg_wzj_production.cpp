#include "hep/ps/lusifer_phase_space_generator.hpp"

#include "catch2/catch.hpp"

#include <algorithm>
//#include <iomanip>
//#include <iostream>
#include <limits>
#include <random>
#include <vector>

using T = HEP_TYPE_T;

hep::lusifer_constants<T> constants(
    T(125.09), T(4.0e-3),
    T(174.2), T(1.41),
    T(80.385), T(2.085),
    T(91.1876), T(2.4952)
);

std::array<std::array<T, 20>, 8> momenta = {
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.54698099970098809e+02),
        T( 1.38855565914527347e+02), T(-8.21290686498014963e+01), T( 1.79953665704955824e+02),
        T( 1.24907796407950784e+02), T(-6.78767290989383270e+01), T(-2.65854483573416118e+01),
        T(-4.44155692544691760e+01), T( 1.87689682916274990e+02), T(-7.09788368155890197e+01),
        T( 1.08714517007143115e+02), T(-1.35538096450486648e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.54698099970098809e+02),
        T( 1.38855565914527347e+02), T(-8.21290686498014963e+01), T( 1.79953665704955824e+02),
        T( 2.81184847317420861e+02), T(-1.38530421616628445e+02), T( 8.30010808825300614e+01),
        T(-2.11352508445516520e+02), T( 3.14126320068049267e+01), T(-3.25144297898891210e-01),
        T(-8.72012232728568648e-01), T( 3.13988427405606885e+01),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 1.12077476278304914e+02),
        T(-6.19570323025470771e+01), T(-2.83545402241723110e+01), T(-3.81701278600286713e+01),
        T( 2.58986115558033816e+02), T( 1.38081874432356955e+02), T(-8.16714524178957930e+01),
        T( 1.81719012410032178e+02), T( 1.96231987457985895e+02), T(-7.61248421298098776e+01),
        T( 1.10025992642068104e+02), T(-1.43548884550003493e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.77916368901321334e+02),
        T(-1.37756868185538195e+02), T( 8.25426850076472078e+01), T(-2.12097879050536278e+02),
        T( 2.58986115558033816e+02), T( 1.38081874432356955e+02), T(-8.16714524178957930e+01),
        T( 1.81719012410032178e+02), T( 3.03930948349694887e+01), T(-3.25006246818752231e-01),
        T(-8.71232589751407716e-01), T( 3.03788666405040999e+01),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 1.08276714415037517e+02),
        T(-5.70892776692139705e+01), T(-4.20740197085439078e+01), T( 1.52541764867213221e+01),
        T( 2.36229021535940433e+02), T(-1.09855581214083713e+02), T( 1.40817096269101881e+02),
        T(-1.24865002688992803e+02), T( 2.22789843343346661e+02), T( 1.66944858883297684e+02),
        T(-9.87430765605579666e+01), T( 1.09610826202271483e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 2.25561766040228150e+02),
        T(-1.03169452039006757e+02), T( 1.39561882353266782e+02), T(-1.19561311611117077e+02),
        T( 1.18943969910749814e+02), T(-6.37754068442909272e+01), T(-4.08188057927088082e+01),
        T( 9.95048540884559252e+00), T( 2.22789843343346661e+02), T( 1.66944858883297684e+02),
        T(-9.87430765605579666e+01), T( 1.09610826202271483e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 1.61107606491241313e+02),
        T( 1.00181876484384730e+02), T(-8.24621620480273378e+01), T( 5.15509078365164513e+01),
        T( 1.51394356354072102e+02), T( 9.08017958742555322e+01), T(-3.04991804435589700e+01),
        T( 7.36878999591182549e+01), T( 2.54793616449011211e+02), T(-1.90983672358640263e+02),
        T( 1.12961342491586308e+02), T(-1.25238807795634699e+02),
    },
    std::array<T, 20>{
        T( 2.83647789647162313e+02), T( 0.00000000000000000e+00), T( 0.00000000000000000e+00),
        T(-2.83647789647162313e+02), T( 2.83647789647162313e+02), T( 0.00000000000000000e+00),
        T( 0.00000000000000000e+00), T( 2.83647789647162313e+02), T( 1.33702192695298152e+02),
        T(-7.99893377483676176e+01), T( 2.41039228257205025e+01), T(-6.65975589456543418e+01),
        T( 1.78799770150015263e+02), T(-1.10994334610272617e+02), T( 8.88574196658657911e+01),
        T(-5.86412488499803999e+01), T( 2.54793616449011239e+02), T( 1.90983672358640234e+02),
        T(-1.12961342491586294e+02), T( 1.25238807795634742e+02),
    },
};

std::array<std::array<T, 8>, 8> densities = {
    std::array<T, 8>{
        T(9.95008193391354603e-07), T(8.70822106848130677e-08), T(9.95295603030832020e-06),
        T(9.97012481746729429e-07), T(1.41730292046397222e-06), T(6.59790068942054681e-07),
        T(2.09362654882931086e-07), T(1.08122544013384145e-06),
    },
    std::array<T, 8>{
        T(3.60491229849480798e-07), T(7.46277185468405550e-04), T(5.43175086882836296e-06),
        T(8.37029157541822454e-04), T(2.28511786989248036e-06), T(3.80873634795307235e-07),
        T(2.63350448757463675e-04), T(1.34241273280276534e-07),
    },
    std::array<T, 8>{
        T(1.08049807866954541e-05), T(1.00902593731171147e-06), T(1.05478786349914250e-06),
        T(8.70605847086474846e-08), T(6.76704782453438760e-07), T(1.44335014608012002e-06),
        T(2.47559294748063243e-07), T(1.32511649275105366e-06),
    },
    std::array<T, 8>{
        T(6.35317835077540110e-06), T(8.22710104356143995e-04), T(3.46323300395690277e-07),
        T(7.58692432062534560e-04), T(3.81274561283093446e-07), T(2.44213656768564910e-06),
        T(2.54784356866882649e-04), T(1.37617826014095461e-07),
    },
    std::array<T, 8>{
        T(1.75488468830759627e-06), T(1.91656306915843515e-06), T(2.20109946425627887e-06),
        T(4.59232540551000827e-07), T(5.71847444028174349e-07), T(1.67638011004713972e-07),
        T(1.59628311783359088e-06), T(6.05345817413821359e-07),
    },
    std::array<T, 8>{
        T(2.03614048450176895e-06), T(4.81641283586224421e-07), T(1.80117758955747444e-06),
        T(1.95187942337695624e-06), T(1.61026080158268346e-07), T(5.40535707038213666e-07),
        T(1.59628311783359088e-06), T(6.05345817413821359e-07),
    },
    std::array<T, 8>{
        T(3.29930673964774547e-06), T(2.16641016274454364e-07), T(2.57166492503815419e-06),
        T(2.71791607524262394e-07), T(1.38025181687685768e-06), T(2.24944211458178553e-06),
        T(7.16460754775451190e-06), T(1.88722121334973034e-05),
    },
    std::array<T, 8>{
        T(2.69239065013398919e-06), T(1.83635276999365095e-06), T(1.50991040315825252e-06),
        T(7.69995911134410712e-07), T(6.76500875798183816e-07), T(6.45605325369569532e-07),
        T(1.88722121334973068e-05), T(7.16460754775451190e-06),
    },
};

TEST_CASE("WZ + jet production phase space", "")
{
    // minimum energy must be larger than the sum of the masses of W and Z
    T const min_energy = T(200.0);
    T const cmf_energy = T(2000.0);

    auto psg = hep::make_lusifer_phase_space_generator(
        min_energy,
        cmf_energy,
        "dq~uq W+ Z0 gl ",
        constants
    );

    std::mt19937 rng;
    std::vector<T> random_numbers(psg->dimensions());

    std::generate(random_numbers.begin(), random_numbers.end(), [&](){
        return std::generate_canonical<T, std::numeric_limits<T>::digits>(rng);
    });

    std::vector<T> p(psg->map_dimensions());
    std::vector<T> d(psg->channels());

//    // generate the test data
//    std::cout.precision(std::numeric_limits<T>::max_digits10);
//    std::cout.setf(std::ios_base::scientific);
//    std::cout.setf(std::ios_base::right);
//
//    std::cout << "std::array<std::array<T, " << psg->map_dimensions() << ">, " << psg->channels()
//        << "> momenta = {\n";
//
//    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
//    {
//        psg->generate(random_numbers, p, channel);
//
//        std::cout << "    std::array<T, " << psg->map_dimensions() << ">{\n";
//
//        std::size_t i = 0;
//        std::size_t n = 3;
//
//        for (; i != p.size() / n; ++i)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != n; ++j)
//            {
//                std::cout << " T(" << std::setw(std::cout.precision() + 7) << p.at(n * i + j)
//                    << "),";
//            }
//            std::cout << '\n';
//        }
//
//        if ((p.size() % n) != 0)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != (p.size() % n); ++j)
//            {
//                std::cout << " T(" << std::setw(std::cout.precision() + 7) << p.at(n * i + j)
//                    << "),";
//            }
//            std::cout << '\n';
//        }
//
//        std::cout << "    },\n";
//    }
//
//    std::cout << "};\n\nstd::array<std::array<T, " << psg->channels() << ">, " << psg->channels()
//        << "> densities = {\n";
//
//    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
//    {
//        psg->generate(random_numbers, p, channel);
//        psg->densities(d);
//
//        std::cout << "    std::array<T, " << psg->channels() << ">{\n";
//
//        std::size_t i = 0;
//        std::size_t n = 3;
//
//        for (; i != d.size() / n; ++i)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != n; ++j)
//            {
//                std::cout << " T(" << d.at(n * i + j) << "),";
//            }
//            std::cout << '\n';
//        }
//
//        if ((d.size() % n) != 0)
//        {
//            std::cout << "       ";
//            for (std::size_t j = 0; j != (d.size() % n); ++j)
//            {
//                std::cout << " T(" << d.at(n * i + j) << "),";
//            }
//            std::cout << '\n';
//        }
//
//        std::cout << "    },\n";
//    }
//
//    std::cout << "};\n";

    for (std::size_t channel = 0; channel != psg->channels(); ++channel)
    {
        CAPTURE( channel );

        psg->generate(random_numbers, p, channel);
        psg->densities(d);

        for (std::size_t j = 0; j != momenta.at(channel).size(); ++j)
        {
            CAPTURE( j );
            CHECK_THAT( p.at(j) , Catch::WithinULP(momenta.at(channel).at(j), 5) );
        }

        for (std::size_t j = 0; j != densities.at(channel).size(); ++j)
        {
            CAPTURE( j );
            CHECK_THAT( d.at(j) , Catch::WithinULP(densities.at(channel).at(j), 5) );
        }
    }
}
